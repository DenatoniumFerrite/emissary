#!/usr/bin/python3
import generators
import sys, re
import parsing

# sanity check for possible items

lmap=lambda a,b:list(map(a,b))



# empty old file
f=open("actions/_gen_bundles.txt", "w")
f.close()

# Okay, so now let's read all the actions
# (besides the ones we generate)
# so we can see which  bundle/unpredictable treasure values we have to
# generate.
# (items does not tell us if they are gained anywhere, this is why
#  we deleted the old file first)
actions={}
parsing.read_all_actions(actions, {}, {})

print("You can safely ignore warnings about missing sources for items generated only by Opening a Bundle of Oddities or Unpredictable Treasure:")
items=parsing.items_from_actions(actions, cards={},item2category={}).keys()

f=open("actions/_gen_bundles.txt", "w")
f.write("# autogenerated by %s, do not edit\n#\n"%sys.argv[0])
floatpat="([0-9]+(?:[.][0-9]*)?)"
nrange=re.compile("[+]?%s(?:[^0-9.]{1,5}%s)?"%(floatpat, floatpat)) 
gainre=re.compile("%sx? *(.*)"%nrange.pattern)
def convert(fname, ranges):
    val2name={}
    name2changes={}
    for l in open("lists/%s.csv"%fname.replace(" ", "_")).read().split(",EOL"):
        l=l.replace('\xa0', ' ').replace('"','').replace("\u2008", "")
        l=l.split(",")
        if len(l)<2:
            continue
        if len(l)!=3:
            raise Exception("Could not parse line %s"%l)
        name,resrange,gains=l
        name=name.strip()
        resrange=lmap(int, resrange.replace("-", "–").split("–"))
        if len(resrange)==1:
            val2name[resrange[0]]=name
        else:
            for i in range(resrange[0], resrange[1]+1):
                val2name[i]=name
        gains=gains.split("\n")
        gains=list(map(lambda g:g.strip(), gains))
        
        if len(gains[-1])> 0 and gains[-1][0]=='=':
            gains=gains[:-1]
        changes=[]
        for g in gains:
            m=gainre.match(g)
            if m:
                item=m.group(3).strip()
                amount=float(m.group(1))
                if m.group(2):
                    amount=(amount+float(m.group(2)))/2.0
                changes.append((amount, item))
            elif g.find("increasing")!=-1:
                pass # Yes, I will ignore the wounds/nightmare increase. sue me. 
            else:
                raise Exception("Could not parse %s"%g)
        name2changes[name]=changes
    for start,end in ranges:
        namecount={}
        for i in range(start, end):
            namecount.setdefault(val2name[i], 0)
            namecount[val2name[i]]+=1
        itemcount={}
        for name,val in namecount.items():
            for gain,item in name2changes[name]:
                itemcount.setdefault(item, 0)
                itemcount[item]+=val*gain
        div=float(end-start)
        f.write("Convert %s %d-%d\n"%(fname, start, end))
        f.write("  Action Cost: 0\n")
        f.write("  You've lost 1 x Meta: %s %d-%d\n"%(fname, start, end))
        for item,count in itemcount.items():
            f.write("  You've gained %0.5f x %s\n"%(count/div, item))

for t in ["Unpredictable Treasure", "Opening a Bundle of Oddities"]:
    r=re.compile("Meta: %s ([0-9]+)-([0-9]+)"%t)
    ranges=lmap(lambda m:(int(m.group(1)), int(m.group(2))),
                filter(lambda m:m,
                       map(lambda item:r.match(item), items)))
    ranges=sorted(ranges, key=lambda a:(a[1], a[0]))
    print("Generating %s for ranges %s"%(t, ranges))
    convert(t,ranges)
