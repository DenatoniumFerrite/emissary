#!/usr/bin/python3
import sys,os
if os.path.dirname(sys.argv[0])==".":
    raise Exception("Please run this script from the parent directory.")
sys.path+=[".", "./sim/"]

import requests, re
from time import sleep

#
# API call based on js get request sent by
# https://fallenlondon.fandom.com/wiki/Special:ListUsers

url="https://fallenlondon.wiki/w/api.php"

params={"action":"query",
        "format":"json",
        "prop":"revisions",
        "rvslots":"*",
        "rvprop":"content",
        "formatversion":"2",
         }
session=requests.Session()



import sys, re
import parsing
from functions import *
actions={}
fname="actions/_gen_buysell.txt"
if True:
    f=open(fname, "w")
    f.close()


parsing.read_all_actions(actions, {}, {})
items=parsing.items_from_actions(actions, cards={},item2category={}).keys()

itemre=re.compile(".*{{IL *[|](.*)[|] *([0-9]+).*}}")
def parse_buy_sell(s, is_upper):
    n=s.find("|Sell Message")
    if n!=-1:
        s=s[0:n-1]
    s=s.strip()
    if s=="-":
        return None
    m=itemre.match(s)
    if m:
        item=m.group(1).strip()
        amount=m.group(2).strip()
        if item not in items:
            raise Exception("Unknown item '%s'"%item)
        return "%s x %s"%(amount, item)
    s=s.replace("}}", "")
    amount=float(s)
    if not is_upper:
        amount*=100
    return "%0.2f x %s"%(amount, ["Penny", "Hinterland Scrip"][is_upper])
    
buysellre=re.compile(" *[|] *(Upper )? *Buying/Selling *= *(.*)")
f=open(fname, "w")
f.write("# autogenerated by %s, do not edit\n#\n"%sys.argv[0])

for i in sorted(items):
    try:
        if i.startswith("Choice:") or i.startswith("Meta:") or i.startswith("CP"):
            continue
        print(i)
        sleep(1)
        f.write("# %s\n"%i)
        params["titles"]=i.replace("Moon-pearl", "Moon-Pearl")
        reply=session.get(url, params=params).json()["query"]["pages"][0]["revisions"][0]["slots"]["main"]["content"]
        for l in reply.split("\n"):
            m=buysellre.match(l)
            if m:
                is_upper=int(m.group(1)!=None)
                buystr,sellstr=lmap(lambda s: parse_buy_sell(s, is_upper), m.group(2).split("/"))
                #print("~~~~~~~~~~ %s, %s"%( buystr, sellstr))
                for s,d, c1, c2 in [ (buystr, "Buy", "gained", "lost"), (sellstr, "Sell", "lost", "gained")]:
                    if s:
                        f.write("%s at %s: %s\n"%(d, ["Bazaar", "Upper River"][is_upper], i))
                        f.write("  Action Cost: 0\n")
                        f.write("  You've %s 1 x %s\n"%(c1, i))
                        f.write("  You've %s %s\n"%(c2, s))
    except Exception as e:
        raise Exception("Error for item %s (line='%s'):"%(i, l)) from e
        continue
